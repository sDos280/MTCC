"""

this file was created to validate the ASTs generated by the parser,
the validator validate the ast by doing the following:
    1. check for copy of identifiers

"""

from Parser.mtcc_c_ast import *
from Parser.mtcc_parser import CParser
import Parser.mtcc_error_handler as eh


class AstValidator:
    def __init__(self, parser: CParser, translation_unit: list[CDeclarator]):
        self.__parser = parser
        self.typedefs: list[CTypedef] = parser.typedefs
        self.translation_unit: list[CDeclarator] = translation_unit
        self.declarators_stack = []

    def look_for_declarator(self, declarator: CDeclarator):
        for declarators in self.declarators_stack:
            if declarator in declarators:
                return declarator
        return None

    def look_for_duplicate_identifiers(self):
        # first we will look if the typedefs has a duplicate
        for typedef in self.typedefs:
            for typedef2 in self.typedefs:
                if typedef != typedef2 and str(typedef.declarator.identifier) == str(typedef2.declarator.identifier):
                    raise self.__parser.fatal_token(typedef2.declarator.identifier.token.index, "Duplicate identifier", eh.DuplicateIdentifier)

        self.push_translation_unit()

    def push_translation_unit(self):
        declarators_list = []
        for external_declaration in self.translation_unit:
            if not isinstance(external_declaration, list):  # external_declaration is list of variable declaration
                for declaration in external_declaration:
                    pass
            else:  # external_declaration is function declaration
                pass

    def push_function_declaration_declarators(self, function_declarator: CFunction):
        for declaration in function_declarator.compound_statement.declarations:
            if isinstance(declaration, CFunction):
                self.push_function_declaration_declarators(declaration)
            else:
                self.push_declarator(declaration)
        self.declarators_stack.append(function_declarator.compound_statement.declarations)
        self.push_declarator(function_declarator)
