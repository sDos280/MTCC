"""

this file was created to validate the ASTs generated by the parser,
the validator validate the ast by doing the following:
    1. check for copy of identifiers

"""

from Parser.mtcc_c_ast import *
from Parser.mtcc_parser import CParser
import Parser.mtcc_error_handler as eh
import enum


class IdentifierKind(enum.Enum):
    Member = enum.auto()
    Regular = enum.auto()


class AstValidator:
    def __init__(self, parser: CParser, translation_unit: list[CDeclarator]):
        self.__parser = parser
        self.typedefs: list[CTypedef] = parser.typedefs
        self.translation_unit: list[CDeclarator] = translation_unit
        self.identifiers_stack: list[tuple[CIdentifier, IdentifierKind]] = []

    def drop_stack_by_amount(self, amount: int):
        if amount > len(self.identifiers_stack):
            raise RuntimeError("amount is bigger than the stack size")

        for _ in range(amount):
            self.identifiers_stack.pop()

    def look_for_identifier(self, identifier: CIdentifier) -> CIdentifier | None:
        if identifier is None:
            return None

        for declarator_, kind in self.identifiers_stack:
            if declarator_.token.string == "" or identifier.token.string == "":
                continue  # we shouldn't really check for empty identifiers

            if identifier.token.string in declarator_.token.string:
                return identifier

        return None

    def push_translation_unit_identifiers(self):
        drop_amount: int = 0

        for external_declaration in self.translation_unit:
            identifier_in_stack: CIdentifier | None = self.look_for_identifier(external_declaration.identifier)

            if identifier_in_stack is not None:
                raise self.__parser.fatal_token(external_declaration.identifier.token.index, "Duplicate identifier", eh.DuplicateIdentifier)

            self.identifiers_stack.append((external_declaration.identifier, IdentifierKind.Regular))

        self.drop_stack_by_amount(drop_amount)
